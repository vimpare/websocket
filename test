// pages/myNews/index.js
var app = getApp()
var socketOpen = false;
var frameBuffer_Data, session, SocketTask;
Page({

  /**
   * 页面的初始数据
   */
  data: {
    inputValue: '',
    returnValue: '', //返回内容
    allContentList: []
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function() {
    var that = this;
    console.log(SocketTask)
    if (!socketOpen) {
      SocketTask = wx.connectSocket({
        url: 'ws://121.40.165.18:8800',
        method: 'GET',
        success: function(res) {
          console.log('WebSocket连接创建', res)
        },
        fail: function(err) {
          wx.showToast({
            title: '网络异常！',
          })
          console.log(err)
        },
      })
    }
    SocketTask.onOpen(res => {
      socketOpen = true;
      console.log(socketOpen)
      console.log('监听 WebSocket 连接打开事件。', res)
    })
    SocketTask.onClose(onClose => {
      console.log('监听 WebSocket 连接关闭事件。', onClose)
      socketOpen = false;
      this.webSocket()
    })
    SocketTask.onError(onError => {
      console.log('监听 WebSocket 错误。错误信息', onError)
      socketOpen = false
    })
    SocketTask.onMessage(onMessage => {
      console.log('监听WebSocket接受到服务器的消息事件。服务器返回的消息', onMessage.data)
      var onMessage_data = onMessage.data
      if (onMessage_data.cmd == 1) {
        that.setData({
          link_list: text
        })
        console.log(text, text instanceof Array)
        // 是否为数组
        if (text instanceof Array) {
          for (var i = 0; i < text.length; i++) {
            text[i]
          }
        } else {

        }
        that.data.allContentList.push({
          is_ai: true,
          text: onMessage_data.body
        });
        console.log(that.data.allContentList)
        that.setData({
          allContentList: that.data.allContentList
        })

      }
    })


  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function() {


  },
  onHide: function() {
    SocketTask.close(function(close) {
      console.log('关闭 WebSocket 连接。', close)
    })
  },
  webSocket: function() {
    // 创建Socket

  },
  getValue: function(e) {
    var value = e.detail.value;
    this.setData({
      inputValue: value
    })
  },
  sendMsg: function() {
    var msg = this.data.inputValue
    console.log(msg, socketOpen)
    if (socketOpen) {
      // 如果打开了socket就发送数据给服务器
      sendSocketMessage(msg)
      this.data.allContentList.push({
          is_my: true,
          text: this.data.inputValue
        
      });
    console.log(this.data.allContentList)
    this.setData({
      allContentList: this.data.allContentList,
      inputValue: ''
    })


  }


},


})
//通过 WebSocket 连接发送数据，需要先 wx.connectSocket，并在 wx.onSocketOpen 回调之后才能发送。
function sendSocketMessage(msg) {
  var that = this;
  console.log('通过 WebSocket 连接发送数据', msg)
  console.log(SocketTask)
  SocketTask.send({
    data: msg
  }, function(res) {
    console.log('已发送', res)
  })
}
